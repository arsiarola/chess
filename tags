!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	0.0.0	/3fdf28bc/
BLACK	piece.h	/^#define BLACK /;"	d
BOARD_HEIGHT	board.h	/^#define BOARD_HEIGHT /;"	d
BOARD_SIZE	board.h	/^#define BOARD_SIZE /;"	d
BOARD_WIDTH	board.h	/^#define BOARD_WIDTH /;"	d
Board	board.h	/^    Board() { init_board(); };$/;"	f	class:Board
Board	board.h	/^class Board {$/;"	c
DOWN	pieces/pawn.h	/^#define DOWN /;"	d
EMPTY_H	pieces/empty.h	/^#define EMPTY_H$/;"	d
Empty	pieces/empty.h	/^class Empty : public Piece {$/;"	c
PAWN_H	pieces/pawn.h	/^#define PAWN_H$/;"	d
PIECE_H	board.h	/^#define PIECE_H$/;"	d
PIECE_H	piece.h	/^#define PIECE_H$/;"	d
Pawn	pieces/pawn.h	/^class Pawn : public Piece {$/;"	c
Piece	piece.cpp	/^Piece::Piece(const Piece &p) {$/;"	f	class:Piece
Piece	piece.cpp	/^Piece::Piece(std::string name_,  int color_) {$/;"	f	class:Piece
Piece	piece.h	/^class Piece {$/;"	c
TILE_H	tile.h	/^#define TILE_H$/;"	d
Tile	tile.cpp	/^Tile::Tile() {$/;"	f	class:Tile
Tile	tile.cpp	/^Tile::Tile(int x_, int y_, Piece piece_) {$/;"	f	class:Tile
Tile	tile.h	/^class Tile {$/;"	c
UP	pieces/pawn.h	/^#define UP /;"	d
WHITE	piece.h	/^#define WHITE /;"	d
board	board.h	/^    Tile board[BOARD_WIDTH][BOARD_HEIGHT];$/;"	m	class:Board	typeref:typename:Tile[][]
color	piece.h	/^    int color;$/;"	m	class:Piece	typeref:typename:int
get_name	piece.cpp	/^string Piece::get_name() {$/;"	f	class:Piece	typeref:typename:string
get_x	tile.cpp	/^int Tile::get_x() {$/;"	f	class:Tile	typeref:typename:int
get_y	tile.cpp	/^int Tile::get_y() {$/;"	f	class:Tile	typeref:typename:int
init_board	board.cpp	/^void Board::init_board() {$/;"	f	class:Board	typeref:typename:void
main	board.cpp	/^int main() {$/;"	f	typeref:typename:int
main	piece.cpp	/^int main() {$/;"	f	typeref:typename:int
move	pieces/empty.cpp	/^bool Empty::move() {$/;"	f	class:Empty	typeref:typename:bool
move	pieces/pawn.cpp	/^bool Pawn::move(Tile from, Tile to) {$/;"	f	class:Pawn	typeref:typename:bool
name	piece.h	/^    std::string name;$/;"	m	class:Piece	typeref:typename:std::string
piece	tile.h	/^    Piece piece;$/;"	m	class:Tile	typeref:typename:Piece
print	board.cpp	/^void Board::print() {$/;"	f	class:Board	typeref:typename:void
print	tile.cpp	/^void Tile::print() {$/;"	f	class:Tile	typeref:typename:void
x	tile.h	/^    int x;$/;"	m	class:Tile	typeref:typename:int
y	tile.h	/^    int y;$/;"	m	class:Tile	typeref:typename:int
